{
  "openapi": "3.0.3",
  "info": {
    "title": "Crochet Tote Bag Design Tool API",
    "description": "Client-side API contracts for crochet pattern design functionality",
    "version": "1.0.0"
  },
  "paths": {
    "/api/projects": {
      "post": {
        "summary": "Create new project",
        "description": "Initialize a new crochet tote bag design project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid dimensions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "summary": "Get project by ID",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update project",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/motifs": {
      "post": {
        "summary": "Place motif on grid",
        "description": "Add a motif to the project grid at specified position",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceMotifRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Motif placed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlacedMotif"
                }
              }
            }
          },
          "400": {
            "description": "Invalid placement (out of bounds or overlapping)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project or motif not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/motifs/{placedMotifId}": {
      "delete": {
        "summary": "Remove placed motif",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "placedMotifId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Motif removed successfully"
          },
          "404": {
            "description": "Project or placed motif not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/pattern": {
      "post": {
        "summary": "Generate crochet pattern",
        "description": "Generate pattern chart and instructions from current grid state",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePatternRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pattern generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pattern"
                }
              }
            }
          },
          "400": {
            "description": "Cannot generate pattern (no motifs placed)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/yarn-calculation": {
      "get": {
        "summary": "Calculate yarn requirements",
        "description": "Calculate number of skeins needed based on current pattern",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Yarn calculation completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YarnCalculation"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/export": {
      "post": {
        "summary": "Export project",
        "description": "Export project as PDF, PNG, or JSON file",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export completed successfully",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "Attachment filename based on format"
              }
            }
          },
          "400": {
            "description": "Invalid export format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/motifs": {
      "get": {
        "summary": "Get available motifs",
        "description": "Retrieve library of pre-defined motifs available for placement",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["flower", "bird", "letter", "geometric"]
            },
            "description": "Filter motifs by category"
          }
        ],
        "responses": {
          "200": {
            "description": "Motifs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Motif"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateProjectRequest": {
        "type": "object",
        "required": ["name", "dimensions"],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Project name"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          }
        }
      },
      "UpdateProjectRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100
          },
          "settings": {
            "$ref": "#/components/schemas/ProjectSettings"
          }
        }
      },
      "PlaceMotifRequest": {
        "type": "object",
        "required": ["motifId", "x", "y"],
        "properties": {
          "motifId": {
            "type": "string",
            "description": "ID of motif to place"
          },
          "x": {
            "type": "integer",
            "minimum": 0,
            "description": "Grid column position"
          },
          "y": {
            "type": "integer",
            "minimum": 0,
            "description": "Grid row position"
          },
          "rotation": {
            "type": "integer",
            "enum": [0, 90, 180, 270],
            "default": 0,
            "description": "Rotation in degrees"
          },
          "flipped": {
            "type": "boolean",
            "default": false,
            "description": "Whether to flip horizontally"
          }
        }
      },
      "GeneratePatternRequest": {
        "type": "object",
        "required": ["stitchInterpretation"],
        "properties": {
          "stitchInterpretation": {
            "type": "string",
            "enum": ["black_filled", "black_open"],
            "description": "How to interpret black squares in pattern"
          }
        }
      },
      "ExportRequest": {
        "type": "object",
        "required": ["format"],
        "properties": {
          "format": {
            "type": "string",
            "enum": ["pdf", "png", "json"],
            "description": "Export file format"
          },
          "includeInstructions": {
            "type": "boolean",
            "default": true,
            "description": "Include written instructions (PDF only)"
          },
          "includeYarnCalculation": {
            "type": "boolean",
            "default": true,
            "description": "Include yarn requirements (PDF only)"
          }
        }
      },
      "Project": {
        "type": "object",
        "required": ["id", "name", "createdAt", "updatedAt", "dimensions", "grid", "motifs", "settings"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "grid": {
            "$ref": "#/components/schemas/Grid"
          },
          "motifs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlacedMotif"
            }
          },
          "pattern": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Pattern"
              }
            ],
            "nullable": true
          },
          "yarnCalculation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/YarnCalculation"
              }
            ],
            "nullable": true
          },
          "settings": {
            "$ref": "#/components/schemas/ProjectSettings"
          }
        }
      },
      "Dimensions": {
        "type": "object",
        "required": ["width", "height"],
        "properties": {
          "width": {
            "type": "integer",
            "minimum": 20,
            "maximum": 200,
            "description": "Width in centimeters"
          },
          "height": {
            "type": "integer",
            "minimum": 20,
            "maximum": 200,
            "description": "Height in centimeters"
          }
        }
      },
      "Grid": {
        "type": "object",
        "required": ["width", "height", "cells", "scale"],
        "properties": {
          "width": {
            "type": "integer",
            "minimum": 20,
            "maximum": 200
          },
          "height": {
            "type": "integer",
            "minimum": 20,
            "maximum": 200
          },
          "cells": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GridCell"
              }
            }
          },
          "scale": {
            "type": "number",
            "minimum": 0.1,
            "maximum": 5.0,
            "default": 1.0
          }
        }
      },
      "GridCell": {
        "type": "object",
        "required": ["x", "y", "state", "color"],
        "properties": {
          "x": {
            "type": "integer",
            "minimum": 0
          },
          "y": {
            "type": "integer",
            "minimum": 0
          },
          "state": {
            "type": "string",
            "enum": ["empty", "filled", "motif"]
          },
          "motifId": {
            "type": "string",
            "nullable": true
          },
          "color": {
            "type": "string",
            "pattern": "^#[0-9A-Fa-f]{6}$",
            "description": "Hex color code"
          }
        }
      },
      "Motif": {
        "type": "object",
        "required": ["id", "name", "category", "pattern", "width", "height", "previewImage"],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "category": {
            "type": "string",
            "enum": ["flower", "bird", "letter", "geometric"]
          },
          "pattern": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            },
            "description": "2D boolean array defining motif shape"
          },
          "width": {
            "type": "integer",
            "minimum": 1
          },
          "height": {
            "type": "integer",
            "minimum": 1
          },
          "previewImage": {
            "type": "string",
            "description": "Base64 encoded preview image"
          }
        }
      },
      "PlacedMotif": {
        "type": "object",
        "required": ["id", "motifId", "x", "y", "placedAt", "rotation", "flipped"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "motifId": {
            "type": "string"
          },
          "x": {
            "type": "integer",
            "minimum": 0
          },
          "y": {
            "type": "integer",
            "minimum": 0
          },
          "placedAt": {
            "type": "string",
            "format": "date-time"
          },
          "rotation": {
            "type": "integer",
            "enum": [0, 90, 180, 270]
          },
          "flipped": {
            "type": "boolean"
          }
        }
      },
      "Pattern": {
        "type": "object",
        "required": ["id", "chart", "instructions", "stitchCount", "generatedAt", "version"],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "chart": {
            "$ref": "#/components/schemas/PatternChart"
          },
          "instructions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Row-by-row crochet instructions"
          },
          "stitchCount": {
            "$ref": "#/components/schemas/StitchCount"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "minimum": 1
          }
        }
      },
      "PatternChart": {
        "type": "object",
        "required": ["rows", "legend", "stitchInterpretation"],
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatternRow"
            }
          },
          "legend": {
            "$ref": "#/components/schemas/ChartLegend"
          },
          "stitchInterpretation": {
            "type": "string",
            "enum": ["black_filled", "black_open"]
          }
        }
      },
      "PatternRow": {
        "type": "object",
        "required": ["rowNumber", "stitches", "direction"],
        "properties": {
          "rowNumber": {
            "type": "integer",
            "minimum": 1
          },
          "stitches": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["open", "filled"]
            }
          },
          "direction": {
            "type": "string",
            "enum": ["left-to-right", "right-to-left"]
          }
        }
      },
      "ChartLegend": {
        "type": "object",
        "required": ["openSymbol", "filledSymbol"],
        "properties": {
          "openSymbol": {
            "type": "string",
            "description": "Symbol representing open stitches"
          },
          "filledSymbol": {
            "type": "string",
            "description": "Symbol representing filled stitches"
          }
        }
      },
      "StitchCount": {
        "type": "object",
        "required": ["total", "filled", "open"],
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "filled": {
            "type": "integer",
            "minimum": 0
          },
          "open": {
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "YarnCalculation": {
        "type": "object",
        "required": ["totalStitches", "yarnLength", "skeinsNeeded", "calculatedAt", "formula"],
        "properties": {
          "totalStitches": {
            "type": "integer",
            "minimum": 0
          },
          "yarnLength": {
            "type": "number",
            "minimum": 0,
            "description": "Total yarn needed in centimeters"
          },
          "skeinsNeeded": {
            "type": "integer",
            "minimum": 1,
            "description": "Number of skeins required (rounded up)"
          },
          "calculatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "formula": {
            "$ref": "#/components/schemas/CalculationFormula"
          }
        }
      },
      "CalculationFormula": {
        "type": "object",
        "required": ["stitchLength", "skeinLength"],
        "properties": {
          "stitchLength": {
            "type": "number",
            "description": "Centimeters of yarn per stitch",
            "default": 4
          },
          "skeinLength": {
            "type": "number",
            "description": "Centimeters of yarn per skein",
            "default": 7500
          }
        }
      },
      "ProjectSettings": {
        "type": "object",
        "required": ["stitchInterpretation", "showGrid", "snapToGrid", "autoSave", "exportFormat"],
        "properties": {
          "stitchInterpretation": {
            "type": "string",
            "enum": ["black_filled", "black_open"],
            "default": "black_filled"
          },
          "showGrid": {
            "type": "boolean",
            "default": true
          },
          "snapToGrid": {
            "type": "boolean",
            "default": true
          },
          "autoSave": {
            "type": "boolean",
            "default": true
          },
          "exportFormat": {
            "type": "string",
            "enum": ["pdf", "png", "json"],
            "default": "pdf"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": ["message", "code"],
        "properties": {
          "message": {
            "type": "string",
            "description": "Human-readable error message"
          },
          "code": {
            "type": "string",
            "description": "Error code for programmatic handling"
          },
          "details": {
            "type": "object",
            "description": "Additional error context"
          }
        }
      }
    }
  }
}